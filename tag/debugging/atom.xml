<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Tag: Debugging | Sample & Hold]]></title>
    <link href="http://sample-hold.com/tag/debugging/atom.xml" rel="self"/>
    <link href="http://sample-hold.com/"/>
    <updated>2013-10-24T12:16:58+02:00</updated>
    <id>http://sample-hold.com/</id>
    <author>
        <name><![CDATA[Frederic Ghilini]]></name>
        
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Create a FFT Analyzer part IV: debugging our Audio Unit with AU Lab]]></title>
        <link href="http://sample-hold.com/2011/11/23/create-a-fft-analyzer-part-iv-debugging-our-audio-unit-with-au-lab/"/>
        <updated>2011-11-23T16:33:15+01:00</updated>
        <id>http://sample-hold.com/2011/11/23/create-a-fft-analyzer-part-iv-debugging-our-audio-unit-with-au-lab</id>
        <content type="html"><![CDATA[<p><img class="alignleft <a" src="href="http://guileboard.files.wordpress.com/2011/11/aulab2.png">http://guileboard.files.wordpress.com/2011/11/aulab2.png</a>"> Debugging an Audio Unit is not as straightforward as debugging a Cocoa application, because your freshly coded component doesn&rsquo;t show up until you insert it in a bus of your favorite DAW.</p>

<p>In this article, we review some methods for automating your debugging sessions using XCode 4. Concerning the DAW, our preference goes for a free host available in the CoreAudio SDK: AU Lab. In only a few steps, you will be able to setup some breakpoints and look into all potential devilish bugs as if you were debugging a simple Cocoa application.</p>

<!-- more -->


<h3>Prerequisites</h3>

<p>We assume that you&rsquo;ve downloaded <a href="http://github.com/fredguile/SimpleSpectrumAnalyzer">the sources of this tutorial on GitHub</a>, and that you have successfully built your component with the default debug configuration.</p>

<h3>Manage schemes</h3>

<p>Xcode 4 provides a classic workflow for testing and packaging your component:</p>

<ol>
<li><p> Build your component</p></li>
<li><p> Run it using debug configuration</p></li>
<li><p> Test it using debug configuration</p></li>
<li><p> Profile it using release configuration</p></li>
<li><p> Analyze your code for possible tweaks</p></li>
<li><p> Archive a delivery for distributing</p></li>
</ol>


<p>This basically suits our needs. The only thing we have to do is launching &ldquo;AU Lab&rdquo; on step 2:</p>

<ul>
<li><p>Click on your target &ldquo;SpectrumAU&rdquo; in the top left area of XCode</p></li>
<li><p>Choose &ldquo;Edit scheme&hellip;&rdquo;</p></li>
<li><p>Select step &ldquo;Run &ndash; Debug&rdquo;</p></li>
<li><p>In the &ldquo;Executable&rdquo; field, choose &ldquo;Other&hellip;&rdquo; and browse you Mac in order to find &ldquo;/Developer/Applications/Audio/AU Lab&rdquo;</p></li>
<li><p>Save scheme</p></li>
</ul>


<p><img class="centered <a" src="href="http://guileboard.files.wordpress.com/2011/11/xcode-edit-scheme.png?w=300">http://guileboard.files.wordpress.com/2011/11/xcode-edit-scheme.png?w=300</a>"></p>

<p>Now, AU Lab will automatically launch each time you hit &ldquo;Run&rdquo;.</p>

<p>Still, your Audio Unit doesn&rsquo;t show up, because we haven&rsquo;t copied the file <em>SimpleSpectrumAU.component</em> into your audio plugins folder. Since we don&rsquo;t want to do it each time we compile a new version, we ought to tweak a bit our build settings to automate this.</p>

<h3>Tweaking build settings</h3>

<p>There are a couple of build settings that may help us automating each deployment.</p>

<p>To understand how they work, let&rsquo;s make a few changes as a first try:</p>

<ul>
<li><p>deployment > Deployment Location: choose &ldquo;Yes&rdquo;</p></li>
<li><p>deployment > Deployment Postprocessing: choose &ldquo;Yes&rdquo;</p></li>
<li><p>deployment > Installation Build Products Location: type &ldquo;/&rdquo;</p></li>
<li><p>deployment > Installation Directory: write &ldquo;$(USER_LIBRARY_DIR)/Audio/Plug-Ins/Components/&rdquo;</p></li>
</ul>


<p>As a result, your audio unit is copied into your audio plugins folder each time you build! So, in one-pass, we successively build our audio unit, deploy it to the proper folder then run AU Lab to start a debugging session.</p>

<p>But I still get an annoying issue on my side (perhaps you won&rsquo;t get it) : <strong>breakpoints don&rsquo;t break.</strong> I suspect Xcode not doing the things we want. When I look into the &ldquo;Debug&rdquo; folder, the compiled component has turned into an alias, pointing to a binary now located in $(USER_LIBRARY_DIR)/Audio/Plug-Ins/Components/.</p>

<p><img class="centered <a" src="href="http://guileboard.files.wordpress.com/2011/11/xcode-created-an-alias.png">http://guileboard.files.wordpress.com/2011/11/xcode-created-an-alias.png</a>"></p>

<p>Actually, I don&rsquo;t think the build settings we mentioned above are a viable solution for the &ldquo;debug&rdquo; configuration. However, we could keep them for the next stages of our workflow, so I suggest changing the build setting in that way:</p>

<ul>
<li><p>deployment > Deployment Location:</p>

<ul>
<li><p>choose &ldquo;No&rdquo; for debug</p></li>
<li><p>choose &ldquo;Yes&rdquo; for release</p></li>
</ul>
</li>
<li><p>deployment > Deployment Postprocessing:</p>

<ul>
<li><p>choose &ldquo;No&rdquo; for debug</p></li>
<li><p>choose &ldquo;Yes&rdquo; for release</p></li>
</ul>
</li>
<li><p>deployment > Installation Build Products Location:</p>

<ul>
<li><p>write &ldquo;/tmp/$(PROJECT_NAME).dst&rdquo; for debug</p></li>
<li><p>write &ldquo;/&rdquo; for release</p></li>
</ul>
</li>
<li><p>deployment > Installation Directory: write &ldquo;$(USER_LIBRARY_DIR)/Audio/Plug-Ins/Components/&rdquo;</p></li>
</ul>


<p>There is another trick we could try in order to automate our deployment in debug mode:</p>

<ul>
<li><p>Open the &ldquo;Build phases&rdquo;</p></li>
<li><p>Add a &ldquo;Copy files&rdquo; phase as the last build phase</p></li>
<li><p>Specify an &ldquo;absolute path&rdquo; as destination: $(USER_LIBRARY_DIR)/Audio/Plug-Ins/Components/</p></li>
<li><p>Add the file &ldquo;SimpleSpectrumAnalyzer.component&rdquo; to the list</p></li>
</ul>


<p>Now everything should be okay and our breakpoints will correctly <strong>break</strong>. The only drawback of this method is that you&rsquo;ll have to cancel this build phase before you move into the next stages of you workflow. You must delete when I build your &ldquo;release&rdquo; configuration, else XCode will alert you of a possible loop when executing your deployment workflow.</p>

<h3>Still&hellip; no sound ?</h3>

<p>First off, don&rsquo;t forget to start the AU Lab engine if you want your Audio Unit to process any sample. You can do this by clicking on the label &ldquo;Audio engine stopped&rdquo; on the lowest part of AU Lab&rsquo;s mixer.</p>

<p><img class="alignleft <a" src="href="http://guileboard.files.wordpress.com/2011/11/smartelectronix.png">http://guileboard.files.wordpress.com/2011/11/smartelectronix.png</a>"> Next, I recommend downloading the MDA AU plug-ins from <a href="http://mda.smartelectronix.com/effects.htm">Smartelectronix&rsquo;s website</a> in order to test our Spectrum Analyzer with a simple sinusoid as input signal. After you have installed it, you should be able to use the &ldquo;TestTone&rdquo; plug-in and generate a pure sine signal to test our spectrum analyzer:</p>

<p><img class="centered <a" src="href="http://guileboard.files.wordpress.com/2011/11/debugging-simplespectrum-analyzer-with-1024-samples.png">http://guileboard.files.wordpress.com/2011/11/debugging-simplespectrum-analyzer-with-1024-samples.png</a>" title="Blocksize is 1024 samples" ></p>

<p>By the way, we shall notice how inaccurate is our analyzer when testing a low-frequency sine-wave with 1024 samples as FFT Size. We can correct that by raising our FFT size : right-click on the graph and choose &ldquo;2048&rdquo; as block size.</p>

<p><img class="centered <a" src="href="http://guileboard.files.wordpress.com/2011/11/debugging-simplespectrum-analyzer-with-2048-samples.png">http://guileboard.files.wordpress.com/2011/11/debugging-simplespectrum-analyzer-with-2048-samples.png</a>" title="With 2048 samples" ></p>

<p>And I&rsquo;m still looking for a way to modulate the phase of this sine wave, in order to test &ldquo;frequency leakage&rdquo; and measure efficiency of our different window functions. You you have a trick for this with MDA AU or any other plug-in, please don&rsquo;t hesitate to leave me a comment !</p>
]]></content>
    </entry>
    
</feed>